version: 2.1

orbs:
  scala-build: liveintent/scala-build@9.4
  node: circleci/node@5.0.3
  dynamo-lock: gastfreund/dynamo-lock@1.0.1

parameters:
  node_version:
    type: string
    default: "18.16.0"
  browserstack_lock_name:
    type: string
    default: browserstack_global
  lock_timeout_seconds:
    type: integer
    default: 7200

references:
  releasable_branch: &releasable_branch
    branches:
      only: master
    tags:
      only: /^$/

  prereleasable_branch: &manual_branch
    branches:
      ignore: /dependabot\/.*/
    tags:
      only: /^$/

  update_pr: &update_pr
    branches:
      only: /dependabot\/.*/
    tags:
      only: /^$/

  untagged_commit: &untagged_commit
    tags:
      only: /^$/

  restore_cache: &restore_cache
    restore_cache:
      key: dependency-cache-{{ checksum "package-lock.json" }}-{{ checksum "package.json" }}

  save_cache: &save_cache
    save_cache:
      key: dependency-cache-{{ checksum "package-lock.json" }}-{{ checksum "package.json" }}
      paths:
        - ./node_modules

  npm_install: &npm_install
    run:
      name: Npm install
      command: npm install

  host_setup: &host_setup
    run:
      name: Setup host entries for TLD tests
      command: |
        echo "127.0.0.1 bln.test.liveintent.com" | sudo tee -a /etc/hosts
        echo "127.0.0.1 test.liveintent.com" | sudo tee -a /etc/hosts
        echo "127.0.0.1 me.idex.com" | sudo tee -a /etc/hosts
        echo "127.0.0.1 schmoogle.com" | sudo tee -a /etc/hosts
        echo "127.0.0.1 framed.test.liveintent.com" | sudo tee -a /etc/hosts
        echo "127.0.0.1 double-framed.test.liveintent.com" | sudo tee -a /etc/hosts
        echo "127.0.0.1 baked.liveintent.com" | sudo tee -a /etc/hosts

  configure_git: &configure_git
    run:
      name: Configure Git
      command: |
        git config user.name "${CIRCLE_USERNAME}"
        git config user.email "dev-berlin@liveintent.com"
        git branch -u origin/${CIRCLE_BRANCH} ${CIRCLE_BRANCH}

  set_ssh_key: &set_ssh_key
    add_ssh_keys:
      fingerprints:
        - "17:a6:0f:32:c6:9e:b1:9e:cc:12:e6:d8:2d:9e:57:3e"

  reset_package_lock: &reset_package_lock
    run:
      name: Reset package-lock.json
      command: git checkout -- package-lock.json

commands:
  # for of dynamo-lock/lock that specifies no_output_timeout
  dynamo-lock_lock:
    parameters:
      ttl:
        description: TTL of lock in seconds
        type: integer
        default: 600
      table:
        description: DynamoDB table for locks
        type: string
        default: ci_locks
      lock_name:
        description: >-
          Name of the lock to acquire

          This name affects which builds lock against each other. The default will
          lock branches on the same project and the same branch. If you'd like to
          lock all builds in a project, you could use
          `${CIRCLE_PROJECT_USERNAME}_${CIRCLE_PROJECT_REPONAME}`
        type: string
        default: ${CIRCLE_PROJECT_USERNAME}_${CIRCLE_PROJECT_REPONAME}_${CIRCLE_BRANCH}
      branches:
        description: >-
          Branch regex to limit locking on

          This is a bash regex, so keep in mind that short escape sequences won't
          work (eg `\d` - use `[0-9]` instead). The lock commands will only be
          effective on branches matching this regex.
        type: string
        default: master|develop
    steps:
      - run:
          name: Acquire lock
          no_output_timeout: << parameters.ttl >>s
          command: |-
            if [[ "$CIRCLE_BRANCH" =~ << parameters.branches >> ]]; then
              [[ -x "/tmp/dynolocker_linux_amd64" ]] || echo 'Please call "setup" first'

              /tmp/dynolocker_linux_amd64 \
                --debug \
                --table "<< parameters.table >>" \
                --name "<< parameters.lock_name >>" \
                --ttl << parameters.ttl >> \
                lock
            else
              echo "Skipping lock due to excluded branch"
            fi


jobs:
  simple_test:
    parallelism: 1
    machine: true
    steps:
      - checkout
      - *restore_cache
      - *host_setup
      - node/install:
          node-version: << pipeline.parameters.node_version >>
      - *npm_install
      - *save_cache
      - run:
          name: Run unit tests
          command: npm run test:unit
      - run:
          name: Run chrome tests in docker
          command: npm run test:it:docker:chrome
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: ./test-results
          destination: test-results
      - run:
          name: Code Coverage
          command: |
            curl -Os https://uploader.codecov.io/latest/linux/codecov
            chmod +x codecov
            ./codecov -t ${CODECOV_TOKEN}

  browserstack:
    parallelism: 1
    machine: true
    steps:
      - checkout
      - *restore_cache
      - *host_setup
      - node/install:
          node-version: << pipeline.parameters.node_version >>
      - *npm_install
      - dynamo-lock/setup:
          branches: '.*'
      - dynamo-lock_lock:
          lock_name: << pipeline.parameters.browserstack_lock_name >>
          ttl: << pipeline.parameters.lock_timeout_seconds >>
          branches: '.*'
      - run:
          name: Run browserstack tests
          command: npm run test:it:browserstack
      - dynamo-lock/unlock-on-fail:
          lock_name: << pipeline.parameters.browserstack_lock_name >>
          branches: '.*'
      - dynamo-lock/unlock:
          lock_name: << pipeline.parameters.browserstack_lock_name >>
          branches: '.*'
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: ./test-results
          destination: test-results

  release:
    parallelism: 1
    machine: true
    parameters:
      increment:
        description: |
          "Increment of release. Allowed values `prepatch`, `preminor`, `premajor`,
          `alpha->beta`, `beta->rc`, `patch`, `minor`, `major`"
        default: "patch"
        type: string
    steps:
      - checkout
      - node/install:
          node-version: << pipeline.parameters.node_version >>
      - *npm_install
      - *configure_git
      - *set_ssh_key
      - *reset_package_lock
      - run:
          name: Authenticate with registry
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > .npmrc
      - run:
          name: release
          command: npm run release:ci:<< parameters.increment >>

workflows:
  version: 2
  build_and_test:
    jobs:
      - simple_test:
          filters:
            <<: *untagged_commit

      - browserstack?:
          type: approval
          requires:
            - simple_test
          filters:
            <<: *manual_branch

      - browserstack:
          name: browserstack_manual
          context:
            - org-global
            - dynolocker
          requires:
            - browserstack?

      - browserstack:
          name: browserstack_update_pr
          context:
            - org-global
            - dynolocker
          requires:
            - simple_test
          filters:
            <<: *update_pr

      - scala-build/merge_pr:
          context: org-global
          requires:
            - browserstack_update_pr
          filters:
            <<: *update_pr

      - release_prepatch?:
          context: live-connect
          type: approval
          requires:
            - browserstack_manual
          filters:
            <<: *manual_branch

      - release:
          context: live-connect
          name: release_prepatch
          increment: "prepatch"
          requires:
            - release_prepatch?

      - release_preminor?:
          context: live-connect
          type: approval
          requires:
            - browserstack_manual
          filters:
            <<: *manual_branch

      - release:
          context: live-connect
          name: release_preminor
          increment: "preminor"
          requires:
            - release_preminor?

      - release_premajor?:
          context: live-connect
          type: approval
          requires:
            - browserstack_manual
          filters:
            <<: *manual_branch

      - release:
          context: live-connect
          name: release_premajor
          increment: "premajor"
          requires:
            - release_premajor?

      - release_alpha->beta?:
          context: live-connect
          type: approval
          requires:
            - browserstack_manual
          filters:
            <<: *releasable_branch

      - release:
          context: live-connect
          name: release_alpha->beta
          increment: "alpha->beta"
          requires:
            - release_alpha->beta?

      - release_beta->rc?:
          context: live-connect
          type: approval
          requires:
            - browserstack_manual
          filters:
            <<: *releasable_branch

      - release:
          context: live-connect
          name: release_beta->rc
          increment: "beta->rc"
          requires:
            - release_beta->rc?

      - release_patch?:
          context: live-connect
          type: approval
          requires:
            - browserstack_manual
          filters:
            <<: *releasable_branch

      - release:
          context: live-connect
          name: release_patch
          increment: "patch"
          requires:
            - release_patch?

      - release_minor?:
          context: live-connect
          type: approval
          requires:
            - browserstack_manual
          filters:
            <<: *releasable_branch

      - release:
          context: live-connect
          name: release_minor
          increment: "minor"
          requires:
            - release_minor?

      - release_major?:
          context: live-connect
          type: approval
          requires:
            - browserstack_manual
          filters:
            <<: *releasable_branch

      - release:
          context: live-connect
          name: release_major
          increment: "major"
          requires:
            - release_major?

  daily-master:
    triggers:
      - schedule:
          cron: "0 3 * * *"
          filters:
            branches:
              only: master
    jobs:
      - simple_test

      - browserstack:
          requires:
            - simple_test
          context: org-global
